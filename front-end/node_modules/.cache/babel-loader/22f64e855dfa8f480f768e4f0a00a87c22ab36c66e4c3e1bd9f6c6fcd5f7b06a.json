{"ast":null,"code":"import baseSortedIndexBy from './_baseSortedIndexBy.js';\nimport identity from './identity.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295,\n  HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n/**\r\n * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\r\n * performs a binary search of `array` to determine the index at which `value`\r\n * should be inserted into `array` in order to maintain its sort order.\r\n *\r\n * @private\r\n * @param {Array} array The sorted array to inspect.\r\n * @param {*} value The value to evaluate.\r\n * @param {boolean} [retHighest] Specify returning the highest qualified index.\r\n * @returns {number} Returns the index at which `value` should be inserted\r\n *  into `array`.\r\n */\nfunction baseSortedIndex(array, value, retHighest) {\n  var low = 0,\n    high = array == null ? low : array.length;\n  if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n    while (low < high) {\n      var mid = low + high >>> 1,\n        computed = array[mid];\n      if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {\n        low = mid + 1;\n      } else {\n        high = mid;\n      }\n    }\n    return high;\n  }\n  return baseSortedIndexBy(array, value, identity, retHighest);\n}\nexport default baseSortedIndex;","map":{"version":3,"names":["baseSortedIndexBy","identity","isSymbol","MAX_ARRAY_LENGTH","HALF_MAX_ARRAY_LENGTH","baseSortedIndex","array","value","retHighest","low","high","length","mid","computed"],"sources":["D:/code/bugzilla/527/front-end/node_modules/lodash-es/_baseSortedIndex.js"],"sourcesContent":["import baseSortedIndexBy from './_baseSortedIndexBy.js';\r\nimport identity from './identity.js';\r\nimport isSymbol from './isSymbol.js';\r\n\r\n/** Used as references for the maximum length and index of an array. */\r\nvar MAX_ARRAY_LENGTH = 4294967295,\r\n    HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\r\n\r\n/**\r\n * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\r\n * performs a binary search of `array` to determine the index at which `value`\r\n * should be inserted into `array` in order to maintain its sort order.\r\n *\r\n * @private\r\n * @param {Array} array The sorted array to inspect.\r\n * @param {*} value The value to evaluate.\r\n * @param {boolean} [retHighest] Specify returning the highest qualified index.\r\n * @returns {number} Returns the index at which `value` should be inserted\r\n *  into `array`.\r\n */\r\nfunction baseSortedIndex(array, value, retHighest) {\r\n  var low = 0,\r\n      high = array == null ? low : array.length;\r\n\r\n  if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\r\n    while (low < high) {\r\n      var mid = (low + high) >>> 1,\r\n          computed = array[mid];\r\n\r\n      if (computed !== null && !isSymbol(computed) &&\r\n          (retHighest ? (computed <= value) : (computed < value))) {\r\n        low = mid + 1;\r\n      } else {\r\n        high = mid;\r\n      }\r\n    }\r\n    return high;\r\n  }\r\n  return baseSortedIndexBy(array, value, identity, retHighest);\r\n}\r\n\r\nexport default baseSortedIndex;\r\n"],"mappings":"AAAA,OAAOA,iBAAiB,MAAM,yBAAyB;AACvD,OAAOC,QAAQ,MAAM,eAAe;AACpC,OAAOC,QAAQ,MAAM,eAAe;;AAEpC;AACA,IAAIC,gBAAgB,GAAG,UAAU;EAC7BC,qBAAqB,GAAGD,gBAAgB,KAAK,CAAC;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,eAAeA,CAACC,KAAK,EAAEC,KAAK,EAAEC,UAAU,EAAE;EACjD,IAAIC,GAAG,GAAG,CAAC;IACPC,IAAI,GAAGJ,KAAK,IAAI,IAAI,GAAGG,GAAG,GAAGH,KAAK,CAACK,MAAM;EAE7C,IAAI,OAAOJ,KAAK,IAAI,QAAQ,IAAIA,KAAK,KAAKA,KAAK,IAAIG,IAAI,IAAIN,qBAAqB,EAAE;IAChF,OAAOK,GAAG,GAAGC,IAAI,EAAE;MACjB,IAAIE,GAAG,GAAIH,GAAG,GAAGC,IAAI,KAAM,CAAC;QACxBG,QAAQ,GAAGP,KAAK,CAACM,GAAG,CAAC;MAEzB,IAAIC,QAAQ,KAAK,IAAI,IAAI,CAACX,QAAQ,CAACW,QAAQ,CAAC,KACvCL,UAAU,GAAIK,QAAQ,IAAIN,KAAK,GAAKM,QAAQ,GAAGN,KAAM,CAAC,EAAE;QAC3DE,GAAG,GAAGG,GAAG,GAAG,CAAC;MACf,CAAC,MAAM;QACLF,IAAI,GAAGE,GAAG;MACZ;IACF;IACA,OAAOF,IAAI;EACb;EACA,OAAOV,iBAAiB,CAACM,KAAK,EAAEC,KAAK,EAAEN,QAAQ,EAAEO,UAAU,CAAC;AAC9D;AAEA,eAAeH,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}