{"ast":null,"code":"import getAllKeys from './_getAllKeys.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\r\n * A specialized version of `baseIsEqualDeep` for objects with support for\r\n * partial deep comparisons.\r\n *\r\n * @private\r\n * @param {Object} object The object to compare.\r\n * @param {Object} other The other object to compare.\r\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\r\n * @param {Function} customizer The function to customize comparisons.\r\n * @param {Function} equalFunc The function to determine equivalents of values.\r\n * @param {Object} stack Tracks traversed `object` and `other` objects.\r\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\r\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n    objProps = getAllKeys(object),\n    objLength = objProps.length,\n    othProps = getAllKeys(other),\n    othLength = othProps.length;\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Check that cyclic values are equal.\n  var objStacked = stack.get(object);\n  var othStacked = stack.get(other);\n  if (objStacked && othStacked) {\n    return objStacked == other && othStacked == object;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n      othValue = other[key];\n    if (customizer) {\n      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n      othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\nexport default equalObjects;","map":{"version":3,"names":["getAllKeys","COMPARE_PARTIAL_FLAG","objectProto","Object","prototype","hasOwnProperty","equalObjects","object","other","bitmask","customizer","equalFunc","stack","isPartial","objProps","objLength","length","othProps","othLength","index","key","call","objStacked","get","othStacked","result","set","skipCtor","objValue","othValue","compared","undefined","objCtor","constructor","othCtor"],"sources":["D:/code/bugzilla/527/front-end/node_modules/lodash-es/_equalObjects.js"],"sourcesContent":["import getAllKeys from './_getAllKeys.js';\r\n\r\n/** Used to compose bitmasks for value comparisons. */\r\nvar COMPARE_PARTIAL_FLAG = 1;\r\n\r\n/** Used for built-in method references. */\r\nvar objectProto = Object.prototype;\r\n\r\n/** Used to check objects for own properties. */\r\nvar hasOwnProperty = objectProto.hasOwnProperty;\r\n\r\n/**\r\n * A specialized version of `baseIsEqualDeep` for objects with support for\r\n * partial deep comparisons.\r\n *\r\n * @private\r\n * @param {Object} object The object to compare.\r\n * @param {Object} other The other object to compare.\r\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\r\n * @param {Function} customizer The function to customize comparisons.\r\n * @param {Function} equalFunc The function to determine equivalents of values.\r\n * @param {Object} stack Tracks traversed `object` and `other` objects.\r\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\r\n */\r\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\r\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\r\n      objProps = getAllKeys(object),\r\n      objLength = objProps.length,\r\n      othProps = getAllKeys(other),\r\n      othLength = othProps.length;\r\n\r\n  if (objLength != othLength && !isPartial) {\r\n    return false;\r\n  }\r\n  var index = objLength;\r\n  while (index--) {\r\n    var key = objProps[index];\r\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\r\n      return false;\r\n    }\r\n  }\r\n  // Check that cyclic values are equal.\r\n  var objStacked = stack.get(object);\r\n  var othStacked = stack.get(other);\r\n  if (objStacked && othStacked) {\r\n    return objStacked == other && othStacked == object;\r\n  }\r\n  var result = true;\r\n  stack.set(object, other);\r\n  stack.set(other, object);\r\n\r\n  var skipCtor = isPartial;\r\n  while (++index < objLength) {\r\n    key = objProps[index];\r\n    var objValue = object[key],\r\n        othValue = other[key];\r\n\r\n    if (customizer) {\r\n      var compared = isPartial\r\n        ? customizer(othValue, objValue, key, other, object, stack)\r\n        : customizer(objValue, othValue, key, object, other, stack);\r\n    }\r\n    // Recursively compare objects (susceptible to call stack limits).\r\n    if (!(compared === undefined\r\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\r\n          : compared\r\n        )) {\r\n      result = false;\r\n      break;\r\n    }\r\n    skipCtor || (skipCtor = key == 'constructor');\r\n  }\r\n  if (result && !skipCtor) {\r\n    var objCtor = object.constructor,\r\n        othCtor = other.constructor;\r\n\r\n    // Non `Object` object instances with different constructors are not equal.\r\n    if (objCtor != othCtor &&\r\n        ('constructor' in object && 'constructor' in other) &&\r\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\r\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\r\n      result = false;\r\n    }\r\n  }\r\n  stack['delete'](object);\r\n  stack['delete'](other);\r\n  return result;\r\n}\r\n\r\nexport default equalObjects;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}