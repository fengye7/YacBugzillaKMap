{"ast":null,"code":"import baseClone from './_baseClone.js';\nimport baseMatchesProperty from './_baseMatchesProperty.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1;\n\n/**\r\n * Creates a function that performs a partial deep comparison between the\r\n * value at `path` of a given object to `srcValue`, returning `true` if the\r\n * object value is equivalent, else `false`.\r\n *\r\n * **Note:** Partial comparisons will match empty array and empty object\r\n * `srcValue` values against any array or object value, respectively. See\r\n * `_.isEqual` for a list of supported value comparisons.\r\n *\r\n * **Note:** Multiple values can be checked by combining several matchers\r\n * using `_.overSome`\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.2.0\r\n * @category Util\r\n * @param {Array|string} path The path of the property to get.\r\n * @param {*} srcValue The value to match.\r\n * @returns {Function} Returns the new spec function.\r\n * @example\r\n *\r\n * var objects = [\r\n *   { 'a': 1, 'b': 2, 'c': 3 },\r\n *   { 'a': 4, 'b': 5, 'c': 6 }\r\n * ];\r\n *\r\n * _.find(objects, _.matchesProperty('a', 4));\r\n * // => { 'a': 4, 'b': 5, 'c': 6 }\r\n *\r\n * // Checking for several possible values\r\n * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));\r\n * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\r\n */\nfunction matchesProperty(path, srcValue) {\n  return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\n}\nexport default matchesProperty;","map":{"version":3,"names":["baseClone","baseMatchesProperty","CLONE_DEEP_FLAG","matchesProperty","path","srcValue"],"sources":["D:/code/bugzilla/527/front-end/node_modules/lodash-es/matchesProperty.js"],"sourcesContent":["import baseClone from './_baseClone.js';\r\nimport baseMatchesProperty from './_baseMatchesProperty.js';\r\n\r\n/** Used to compose bitmasks for cloning. */\r\nvar CLONE_DEEP_FLAG = 1;\r\n\r\n/**\r\n * Creates a function that performs a partial deep comparison between the\r\n * value at `path` of a given object to `srcValue`, returning `true` if the\r\n * object value is equivalent, else `false`.\r\n *\r\n * **Note:** Partial comparisons will match empty array and empty object\r\n * `srcValue` values against any array or object value, respectively. See\r\n * `_.isEqual` for a list of supported value comparisons.\r\n *\r\n * **Note:** Multiple values can be checked by combining several matchers\r\n * using `_.overSome`\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.2.0\r\n * @category Util\r\n * @param {Array|string} path The path of the property to get.\r\n * @param {*} srcValue The value to match.\r\n * @returns {Function} Returns the new spec function.\r\n * @example\r\n *\r\n * var objects = [\r\n *   { 'a': 1, 'b': 2, 'c': 3 },\r\n *   { 'a': 4, 'b': 5, 'c': 6 }\r\n * ];\r\n *\r\n * _.find(objects, _.matchesProperty('a', 4));\r\n * // => { 'a': 4, 'b': 5, 'c': 6 }\r\n *\r\n * // Checking for several possible values\r\n * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));\r\n * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\r\n */\r\nfunction matchesProperty(path, srcValue) {\r\n  return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\r\n}\r\n\r\nexport default matchesProperty;\r\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,iBAAiB;AACvC,OAAOC,mBAAmB,MAAM,2BAA2B;;AAE3D;AACA,IAAIC,eAAe,GAAG,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAACC,IAAI,EAAEC,QAAQ,EAAE;EACvC,OAAOJ,mBAAmB,CAACG,IAAI,EAAEJ,SAAS,CAACK,QAAQ,EAAEH,eAAe,CAAC,CAAC;AACxE;AAEA,eAAeC,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}