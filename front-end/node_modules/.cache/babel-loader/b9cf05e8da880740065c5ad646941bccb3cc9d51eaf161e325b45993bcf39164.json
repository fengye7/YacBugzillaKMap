{"ast":null,"code":"import escapeHtmlChar from './_escapeHtmlChar.js';\nimport toString from './toString.js';\n\n/** Used to match HTML entities and HTML characters. */\nvar reUnescapedHtml = /[&<>\"']/g,\n  reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n/**\r\n * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\r\n * corresponding HTML entities.\r\n *\r\n * **Note:** No other characters are escaped. To escape additional\r\n * characters use a third-party library like [_he_](https://mths.be/he).\r\n *\r\n * Though the \">\" character is escaped for symmetry, characters like\r\n * \">\" and \"/\" don't need escaping in HTML and have no special meaning\r\n * unless they're part of a tag or unquoted attribute value. See\r\n * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\r\n * (under \"semi-related fun fact\") for more details.\r\n *\r\n * When working with HTML you should always\r\n * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\r\n * XSS vectors.\r\n *\r\n * @static\r\n * @since 0.1.0\r\n * @memberOf _\r\n * @category String\r\n * @param {string} [string=''] The string to escape.\r\n * @returns {string} Returns the escaped string.\r\n * @example\r\n *\r\n * _.escape('fred, barney, & pebbles');\r\n * // => 'fred, barney, &amp; pebbles'\r\n */\nfunction escape(string) {\n  string = toString(string);\n  return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;\n}\nexport default escape;","map":{"version":3,"names":["escapeHtmlChar","toString","reUnescapedHtml","reHasUnescapedHtml","RegExp","source","escape","string","test","replace"],"sources":["D:/code/bugzilla/527/front-end/node_modules/lodash-es/escape.js"],"sourcesContent":["import escapeHtmlChar from './_escapeHtmlChar.js';\r\nimport toString from './toString.js';\r\n\r\n/** Used to match HTML entities and HTML characters. */\r\nvar reUnescapedHtml = /[&<>\"']/g,\r\n    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\r\n\r\n/**\r\n * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\r\n * corresponding HTML entities.\r\n *\r\n * **Note:** No other characters are escaped. To escape additional\r\n * characters use a third-party library like [_he_](https://mths.be/he).\r\n *\r\n * Though the \">\" character is escaped for symmetry, characters like\r\n * \">\" and \"/\" don't need escaping in HTML and have no special meaning\r\n * unless they're part of a tag or unquoted attribute value. See\r\n * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\r\n * (under \"semi-related fun fact\") for more details.\r\n *\r\n * When working with HTML you should always\r\n * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\r\n * XSS vectors.\r\n *\r\n * @static\r\n * @since 0.1.0\r\n * @memberOf _\r\n * @category String\r\n * @param {string} [string=''] The string to escape.\r\n * @returns {string} Returns the escaped string.\r\n * @example\r\n *\r\n * _.escape('fred, barney, & pebbles');\r\n * // => 'fred, barney, &amp; pebbles'\r\n */\r\nfunction escape(string) {\r\n  string = toString(string);\r\n  return (string && reHasUnescapedHtml.test(string))\r\n    ? string.replace(reUnescapedHtml, escapeHtmlChar)\r\n    : string;\r\n}\r\n\r\nexport default escape;\r\n"],"mappings":"AAAA,OAAOA,cAAc,MAAM,sBAAsB;AACjD,OAAOC,QAAQ,MAAM,eAAe;;AAEpC;AACA,IAAIC,eAAe,GAAG,UAAU;EAC5BC,kBAAkB,GAAGC,MAAM,CAACF,eAAe,CAACG,MAAM,CAAC;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAMA,CAACC,MAAM,EAAE;EACtBA,MAAM,GAAGN,QAAQ,CAACM,MAAM,CAAC;EACzB,OAAQA,MAAM,IAAIJ,kBAAkB,CAACK,IAAI,CAACD,MAAM,CAAC,GAC7CA,MAAM,CAACE,OAAO,CAACP,eAAe,EAAEF,cAAc,CAAC,GAC/CO,MAAM;AACZ;AAEA,eAAeD,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}