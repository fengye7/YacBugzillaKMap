{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport SetCache from './_SetCache.js';\nimport arraySome from './_arraySome.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n  COMPARE_UNORDERED_FLAG = 2;\n\n/**\r\n * A specialized version of `baseIsEqualDeep` for arrays with support for\r\n * partial deep comparisons.\r\n *\r\n * @private\r\n * @param {Array} array The array to compare.\r\n * @param {Array} other The other array to compare.\r\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\r\n * @param {Function} customizer The function to customize comparisons.\r\n * @param {Function} equalFunc The function to determine equivalents of values.\r\n * @param {Object} stack Tracks traversed `array` and `other` objects.\r\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\r\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n    arrLength = array.length,\n    othLength = other.length;\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Check that cyclic values are equal.\n  var arrStacked = stack.get(array);\n  var othStacked = stack.get(other);\n  if (arrStacked && othStacked) {\n    return arrStacked == other && othStacked == array;\n  }\n  var index = -1,\n    result = true,\n    seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n      othValue = other[index];\n    if (customizer) {\n      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function (othValue, othIndex) {\n        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n          return seen.push(othIndex);\n        }\n      })) {\n        result = false;\n        break;\n      }\n    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\nexport default equalArrays;","map":{"version":3,"names":["SetCache","arraySome","cacheHas","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","equalArrays","array","other","bitmask","customizer","equalFunc","stack","isPartial","arrLength","length","othLength","arrStacked","get","othStacked","index","result","seen","undefined","set","arrValue","othValue","compared","othIndex","push"],"sources":["D:/code/bugzilla/527/front-end/node_modules/lodash-es/_equalArrays.js"],"sourcesContent":["import SetCache from './_SetCache.js';\r\nimport arraySome from './_arraySome.js';\r\nimport cacheHas from './_cacheHas.js';\r\n\r\n/** Used to compose bitmasks for value comparisons. */\r\nvar COMPARE_PARTIAL_FLAG = 1,\r\n    COMPARE_UNORDERED_FLAG = 2;\r\n\r\n/**\r\n * A specialized version of `baseIsEqualDeep` for arrays with support for\r\n * partial deep comparisons.\r\n *\r\n * @private\r\n * @param {Array} array The array to compare.\r\n * @param {Array} other The other array to compare.\r\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\r\n * @param {Function} customizer The function to customize comparisons.\r\n * @param {Function} equalFunc The function to determine equivalents of values.\r\n * @param {Object} stack Tracks traversed `array` and `other` objects.\r\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\r\n */\r\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\r\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\r\n      arrLength = array.length,\r\n      othLength = other.length;\r\n\r\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\r\n    return false;\r\n  }\r\n  // Check that cyclic values are equal.\r\n  var arrStacked = stack.get(array);\r\n  var othStacked = stack.get(other);\r\n  if (arrStacked && othStacked) {\r\n    return arrStacked == other && othStacked == array;\r\n  }\r\n  var index = -1,\r\n      result = true,\r\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\r\n\r\n  stack.set(array, other);\r\n  stack.set(other, array);\r\n\r\n  // Ignore non-index properties.\r\n  while (++index < arrLength) {\r\n    var arrValue = array[index],\r\n        othValue = other[index];\r\n\r\n    if (customizer) {\r\n      var compared = isPartial\r\n        ? customizer(othValue, arrValue, index, other, array, stack)\r\n        : customizer(arrValue, othValue, index, array, other, stack);\r\n    }\r\n    if (compared !== undefined) {\r\n      if (compared) {\r\n        continue;\r\n      }\r\n      result = false;\r\n      break;\r\n    }\r\n    // Recursively compare arrays (susceptible to call stack limits).\r\n    if (seen) {\r\n      if (!arraySome(other, function(othValue, othIndex) {\r\n            if (!cacheHas(seen, othIndex) &&\r\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\r\n              return seen.push(othIndex);\r\n            }\r\n          })) {\r\n        result = false;\r\n        break;\r\n      }\r\n    } else if (!(\r\n          arrValue === othValue ||\r\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\r\n        )) {\r\n      result = false;\r\n      break;\r\n    }\r\n  }\r\n  stack['delete'](array);\r\n  stack['delete'](other);\r\n  return result;\r\n}\r\n\r\nexport default equalArrays;\r\n"],"mappings":";AAAA,OAAOA,QAAQ,MAAM,gBAAgB;AACrC,OAAOC,SAAS,MAAM,iBAAiB;AACvC,OAAOC,QAAQ,MAAM,gBAAgB;;AAErC;AACA,IAAIC,oBAAoB,GAAG,CAAC;EACxBC,sBAAsB,GAAG,CAAC;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,WAAWA,CAACC,KAAK,EAAEC,KAAK,EAAEC,OAAO,EAAEC,UAAU,EAAEC,SAAS,EAAEC,KAAK,EAAE;EACxE,IAAIC,SAAS,GAAGJ,OAAO,GAAGL,oBAAoB;IAC1CU,SAAS,GAAGP,KAAK,CAACQ,MAAM;IACxBC,SAAS,GAAGR,KAAK,CAACO,MAAM;EAE5B,IAAID,SAAS,IAAIE,SAAS,IAAI,EAAEH,SAAS,IAAIG,SAAS,GAAGF,SAAS,CAAC,EAAE;IACnE,OAAO,KAAK;EACd;EACA;EACA,IAAIG,UAAU,GAAGL,KAAK,CAACM,GAAG,CAACX,KAAK,CAAC;EACjC,IAAIY,UAAU,GAAGP,KAAK,CAACM,GAAG,CAACV,KAAK,CAAC;EACjC,IAAIS,UAAU,IAAIE,UAAU,EAAE;IAC5B,OAAOF,UAAU,IAAIT,KAAK,IAAIW,UAAU,IAAIZ,KAAK;EACnD;EACA,IAAIa,KAAK,GAAG,CAAC,CAAC;IACVC,MAAM,GAAG,IAAI;IACbC,IAAI,GAAIb,OAAO,GAAGJ,sBAAsB,GAAI,IAAIJ,QAAQ,CAAD,CAAC,GAAGsB,SAAS;EAExEX,KAAK,CAACY,GAAG,CAACjB,KAAK,EAAEC,KAAK,CAAC;EACvBI,KAAK,CAACY,GAAG,CAAChB,KAAK,EAAED,KAAK,CAAC;;EAEvB;EACA,OAAO,EAAEa,KAAK,GAAGN,SAAS,EAAE;IAC1B,IAAIW,QAAQ,GAAGlB,KAAK,CAACa,KAAK,CAAC;MACvBM,QAAQ,GAAGlB,KAAK,CAACY,KAAK,CAAC;IAE3B,IAAIV,UAAU,EAAE;MACd,IAAIiB,QAAQ,GAAGd,SAAS,GACpBH,UAAU,CAACgB,QAAQ,EAAED,QAAQ,EAAEL,KAAK,EAAEZ,KAAK,EAAED,KAAK,EAAEK,KAAK,CAAC,GAC1DF,UAAU,CAACe,QAAQ,EAAEC,QAAQ,EAAEN,KAAK,EAAEb,KAAK,EAAEC,KAAK,EAAEI,KAAK,CAAC;IAChE;IACA,IAAIe,QAAQ,KAAKJ,SAAS,EAAE;MAC1B,IAAII,QAAQ,EAAE;QACZ;MACF;MACAN,MAAM,GAAG,KAAK;MACd;IACF;IACA;IACA,IAAIC,IAAI,EAAE;MACR,IAAI,CAACpB,SAAS,CAACM,KAAK,EAAE,UAASkB,QAAQ,EAAEE,QAAQ,EAAE;QAC7C,IAAI,CAACzB,QAAQ,CAACmB,IAAI,EAAEM,QAAQ,CAAC,KACxBH,QAAQ,KAAKC,QAAQ,IAAIf,SAAS,CAACc,QAAQ,EAAEC,QAAQ,EAAEjB,OAAO,EAAEC,UAAU,EAAEE,KAAK,CAAC,CAAC,EAAE;UACxF,OAAOU,IAAI,CAACO,IAAI,CAACD,QAAQ,CAAC;QAC5B;MACF,CAAC,CAAC,EAAE;QACNP,MAAM,GAAG,KAAK;QACd;MACF;IACF,CAAC,MAAM,IAAI,EACLI,QAAQ,KAAKC,QAAQ,IACnBf,SAAS,CAACc,QAAQ,EAAEC,QAAQ,EAAEjB,OAAO,EAAEC,UAAU,EAAEE,KAAK,CAAC,CAC5D,EAAE;MACLS,MAAM,GAAG,KAAK;MACd;IACF;EACF;EACAT,KAAK,CAAC,QAAQ,CAAC,CAACL,KAAK,CAAC;EACtBK,KAAK,CAAC,QAAQ,CAAC,CAACJ,KAAK,CAAC;EACtB,OAAOa,MAAM;AACf;AAEA,eAAef,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}