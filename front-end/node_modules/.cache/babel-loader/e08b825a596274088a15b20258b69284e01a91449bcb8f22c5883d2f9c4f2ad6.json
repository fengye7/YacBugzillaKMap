{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as echarts from \"echarts\";\nimport { ref, onMounted, watch } from \"vue\";\nimport axios from 'axios';\n\n//axios\n\nexport default {\n  __name: 'BarChart',\n  props: {\n    data: {\n      type: Array,\n      required: true\n    },\n    xAxisDataKey: {\n      type: String,\n      default: 'date'\n    },\n    yAxisDataKey: {\n      type: String,\n      default: 'value'\n    }\n  },\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const sev = ref(null);\n    const data = ref(null);\n    const chartRef = ref([]);\n    const option = {\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          // Use axis to trigger tooltip\n          type: 'shadow' // 'shadow' as default; can also be 'line' or 'shadow'\n        }\n      },\n      legend: {},\n      grid: {\n        left: '3%',\n        right: '4%',\n        bottom: '3%',\n        containLabel: true\n      },\n      xAxis: {\n        type: 'value'\n      },\n      yAxis: {\n        type: 'category',\n        data: chartRef.value\n      },\n      series: [\n        // {\n        //     name: 'Direct',\n        //     type: 'bar',\n        //     stack: 'total',\n        //     label: {\n        //         show: true\n        //     },\n        //     emphasis: {\n        //         focus: 'series'\n        //     },\n        //     data: [320, 302, 301, 334, 390, 330, 320]\n        // },\n        // {\n        //     name: 'Mail Ad',\n        //     type: 'bar',\n        //     stack: 'total',\n        //     label: {\n        //         show: true\n        //     },\n        //     emphasis: {\n        //         focus: 'series'\n        //     },\n        //     data: [120, 132, 101, 134, 90, 230, 210]\n        // },\n        // {\n        //     name: 'Affiliate Ad',\n        //     type: 'bar',\n        //     stack: 'total',\n        //     label: {\n        //         show: true\n        //     },\n        //     emphasis: {\n        //         focus: 'series'\n        //     },\n        //     data: [220, 182, 191, 234, 290, 330, 310]\n        // },\n        // {\n        //     name: 'Video Ad',\n        //     type: 'bar',\n        //     stack: 'total',\n        //     label: {\n        //         show: true\n        //     },\n        //     emphasis: {\n        //         focus: 'series'\n        //     },\n        //     data: [150, 212, 201, 154, 190, 330, 410]\n        // },\n        // {\n        //     name: 'Search Engine',\n        //     type: 'bar',\n        //     stack: 'total',\n        //     label: {\n        //         show: true\n        //     },\n        //     emphasis: {\n        //         focus: 'series'\n        //     },\n        //     data: [820, 832, 901, 934, 1290, 1330, 1320]\n        // }\n      ]\n    };\n    let baseUrl = 'http://47.120.41.97:8002/bugs/';\n    const fetchRef = async () => {\n      try {\n        const response = await axios.get(baseUrl + 'statuses');\n        chartRef.value = response.data; // 假设后端返回的数据格式符合饼图需要的数据结构\n        if (chart) {\n          chart.setOption(getOption());\n        }\n        console.log(chartRef);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    const fetchSev = async () => {\n      try {\n        const response = await axios.get(baseUrl + 'severity');\n        sev.value = response.data; // 假设后端返回的数据格式符合饼图需要的数据结构\n\n        console.log(sev);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    const fetchData = async () => {\n      for (const sta of chartRef.value) {\n        option.series.push({\n          name: serie.name,\n          type: 'bar',\n          stack: 'total',\n          label: {\n            show: true\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: serie.data\n        });\n        for (const s of sev.value) {\n          const response = await axios.get(baseUrl + 'severityStatusCount', {\n            params: {\n              status: sta,\n              severity: s\n            }\n          }).then(response => {\n            console.log(response.data);\n            // 处理成功的情况\n\n            for (const serie of seriesData) {}\n            data.value.push(response.data);\n          }).catch(error => {\n            // 处理错误情况\n            console.error('Error fetching data:', error);\n          });\n        }\n      }\n    };\n    const props = __props;\n    onMounted(() => {\n      initChart();\n    });\n    watch(() => props.data, () => {\n      if (chart) {\n        chart.setOption(getOption());\n      }\n    }, {\n      deep: true\n    });\n    let chart;\n    const getOption = () => {\n      return option;\n    };\n\n    // {\n    //     return {\n    //         xAxis: {\n    //             type: 'category',\n    //             data: props.data.map(item => item[props.xAxisDataKey])\n    //         },\n    //         yAxis: {\n    //             type: 'value'\n    //         },\n    //         series: [\n    //             {\n    //                 data: props.data.map(item => item[props.yAxisDataKey]),\n    //                 type: 'bar'\n    //             }\n    //         ]\n    //     };\n    // };\n\n    const initChart = () => {\n      fetchRef();\n      fetchSev();\n      chart = echarts.init(chartRef.value);\n      chart.setOption(getOption());\n    };\n    const __returned__ = {\n      sev,\n      data,\n      chartRef,\n      option,\n      get baseUrl() {\n        return baseUrl;\n      },\n      set baseUrl(v) {\n        baseUrl = v;\n      },\n      fetchRef,\n      fetchSev,\n      fetchData,\n      props,\n      get chart() {\n        return chart;\n      },\n      set chart(v) {\n        chart = v;\n      },\n      getOption,\n      initChart,\n      get echarts() {\n        return echarts;\n      },\n      ref,\n      onMounted,\n      watch,\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["echarts","ref","onMounted","watch","axios","sev","data","chartRef","option","tooltip","trigger","axisPointer","type","legend","grid","left","right","bottom","containLabel","xAxis","yAxis","value","series","baseUrl","fetchRef","response","get","chart","setOption","getOption","console","log","error","fetchSev","fetchData","sta","push","name","serie","stack","label","show","emphasis","focus","s","params","status","severity","then","seriesData","catch","props","__props","initChart","deep","init"],"sources":["D:/code/bugzilla/527/front-end/src/components/BarChart.vue"],"sourcesContent":["<template>\r\n    <el-card>\r\n        <div ref=\"chartRef\" :style=\"{ width: '1000%', height: '600%' }\"></div>\r\n    </el-card>\r\n</template>\r\n\r\n<script setup>\r\nimport * as echarts from \"echarts\";\r\nimport { defineProps, ref, onMounted, watch } from \"vue\";\r\nimport axios from 'axios';\r\n\r\n//axios\r\nconst sev = ref(null);\r\nconst data = ref(null);\r\nconst chartRef = ref([]);\r\nconst option = {\r\n    tooltip: {\r\n        trigger: 'axis',\r\n        axisPointer: {\r\n            // Use axis to trigger tooltip\r\n            type: 'shadow' // 'shadow' as default; can also be 'line' or 'shadow'\r\n        }\r\n    },\r\n    legend: {},\r\n    grid: {\r\n        left: '3%',\r\n        right: '4%',\r\n        bottom: '3%',\r\n        containLabel: true\r\n    },\r\n    xAxis: {\r\n        type: 'value'\r\n    },\r\n    yAxis: {\r\n        type: 'category',\r\n        data: chartRef.value\r\n    },\r\n    series: [\r\n        // {\r\n        //     name: 'Direct',\r\n        //     type: 'bar',\r\n        //     stack: 'total',\r\n        //     label: {\r\n        //         show: true\r\n        //     },\r\n        //     emphasis: {\r\n        //         focus: 'series'\r\n        //     },\r\n        //     data: [320, 302, 301, 334, 390, 330, 320]\r\n        // },\r\n        // {\r\n        //     name: 'Mail Ad',\r\n        //     type: 'bar',\r\n        //     stack: 'total',\r\n        //     label: {\r\n        //         show: true\r\n        //     },\r\n        //     emphasis: {\r\n        //         focus: 'series'\r\n        //     },\r\n        //     data: [120, 132, 101, 134, 90, 230, 210]\r\n        // },\r\n        // {\r\n        //     name: 'Affiliate Ad',\r\n        //     type: 'bar',\r\n        //     stack: 'total',\r\n        //     label: {\r\n        //         show: true\r\n        //     },\r\n        //     emphasis: {\r\n        //         focus: 'series'\r\n        //     },\r\n        //     data: [220, 182, 191, 234, 290, 330, 310]\r\n        // },\r\n        // {\r\n        //     name: 'Video Ad',\r\n        //     type: 'bar',\r\n        //     stack: 'total',\r\n        //     label: {\r\n        //         show: true\r\n        //     },\r\n        //     emphasis: {\r\n        //         focus: 'series'\r\n        //     },\r\n        //     data: [150, 212, 201, 154, 190, 330, 410]\r\n        // },\r\n        // {\r\n        //     name: 'Search Engine',\r\n        //     type: 'bar',\r\n        //     stack: 'total',\r\n        //     label: {\r\n        //         show: true\r\n        //     },\r\n        //     emphasis: {\r\n        //         focus: 'series'\r\n        //     },\r\n        //     data: [820, 832, 901, 934, 1290, 1330, 1320]\r\n        // }\r\n    ]\r\n};\r\n\r\nlet baseUrl = 'http://47.120.41.97:8002/bugs/'\r\n\r\nconst fetchRef = async () => {\r\n    try {\r\n        const response = await axios.get(baseUrl + 'statuses');\r\n        chartRef.value = response.data; // 假设后端返回的数据格式符合饼图需要的数据结构\r\n        if (chart) {\r\n            chart.setOption(getOption());\r\n        }\r\n        console.log(chartRef)\r\n\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n    }\r\n};\r\n\r\nconst fetchSev = async () => {\r\n    try {\r\n        const response = await axios.get(baseUrl + 'severity');\r\n        sev.value = response.data; // 假设后端返回的数据格式符合饼图需要的数据结构\r\n\r\n        console.log(sev)\r\n\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n    }\r\n};\r\n\r\nconst fetchData = async () => {\r\n    for (const sta of chartRef.value) {\r\n        option.series.push({\r\n                        name: serie.name,\r\n                        type: 'bar',\r\n                        stack: 'total',\r\n                        label: { show: true },\r\n                        emphasis: { focus: 'series' },\r\n                        data: serie.data\r\n                    });\r\n        for (const s of sev.value) {\r\n            const response = await axios.get(baseUrl + 'severityStatusCount', {\r\n                params: {\r\n                    status: sta,\r\n                    severity: s,\r\n                }\r\n            }).then(response => {\r\n                console.log(response.data);\r\n                // 处理成功的情况\r\n\r\n                for (const serie of seriesData) {\r\n                    \r\n                }\r\n\r\n                data.value.push(response.data);\r\n\r\n            })\r\n                .catch(error => {\r\n                    // 处理错误情况\r\n                    console.error('Error fetching data:', error);\r\n                });\r\n        }\r\n    }\r\n\r\n};\r\n\r\nconst props = defineProps({\r\n    data: {\r\n        type: Array,\r\n        required: true\r\n    },\r\n    xAxisDataKey: {\r\n        type: String,\r\n        default: 'date'\r\n    },\r\n    yAxisDataKey: {\r\n        type: String,\r\n        default: 'value'\r\n    }\r\n});\r\n\r\nonMounted(() => {\r\n    initChart();\r\n});\r\n\r\nwatch(\r\n    () => props.data,\r\n    () => {\r\n        if (chart) {\r\n            chart.setOption(getOption());\r\n        }\r\n    },\r\n    { deep: true }\r\n);\r\n\r\nlet chart;\r\n\r\nconst getOption = () => {\r\n    return option;\r\n};\r\n\r\n\r\n// {\r\n//     return {\r\n//         xAxis: {\r\n//             type: 'category',\r\n//             data: props.data.map(item => item[props.xAxisDataKey])\r\n//         },\r\n//         yAxis: {\r\n//             type: 'value'\r\n//         },\r\n//         series: [\r\n//             {\r\n//                 data: props.data.map(item => item[props.yAxisDataKey]),\r\n//                 type: 'bar'\r\n//             }\r\n//         ]\r\n//     };\r\n// };\r\n\r\nconst initChart = () => {\r\n    fetchRef();\r\n    fetchSev();\r\n    chart = echarts.init(chartRef.value);\r\n    chart.setOption(getOption());\r\n};\r\n\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}