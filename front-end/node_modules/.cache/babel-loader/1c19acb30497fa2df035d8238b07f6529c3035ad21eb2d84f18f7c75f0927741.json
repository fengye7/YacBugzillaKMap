{"ast":null,"code":"import Symbol from './_Symbol.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\n\n/** Built-in value references. */\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\r\n * Checks if `value` is a flattenable `arguments` object or array.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\r\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\nexport default isFlattenable;","map":{"version":3,"names":["Symbol","isArguments","isArray","spreadableSymbol","isConcatSpreadable","undefined","isFlattenable","value"],"sources":["D:/code/bugzilla/527/front-end/node_modules/lodash-es/_isFlattenable.js"],"sourcesContent":["import Symbol from './_Symbol.js';\r\nimport isArguments from './isArguments.js';\r\nimport isArray from './isArray.js';\r\n\r\n/** Built-in value references. */\r\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\r\n\r\n/**\r\n * Checks if `value` is a flattenable `arguments` object or array.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\r\n */\r\nfunction isFlattenable(value) {\r\n  return isArray(value) || isArguments(value) ||\r\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\r\n}\r\n\r\nexport default isFlattenable;\r\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,cAAc;AACjC,OAAOC,WAAW,MAAM,kBAAkB;AAC1C,OAAOC,OAAO,MAAM,cAAc;;AAElC;AACA,IAAIC,gBAAgB,GAAGH,MAAM,GAAGA,MAAM,CAACI,kBAAkB,GAAGC,SAAS;;AAErE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAACC,KAAK,EAAE;EAC5B,OAAOL,OAAO,CAACK,KAAK,CAAC,IAAIN,WAAW,CAACM,KAAK,CAAC,IACzC,CAAC,EAAEJ,gBAAgB,IAAII,KAAK,IAAIA,KAAK,CAACJ,gBAAgB,CAAC,CAAC;AAC5D;AAEA,eAAeG,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}