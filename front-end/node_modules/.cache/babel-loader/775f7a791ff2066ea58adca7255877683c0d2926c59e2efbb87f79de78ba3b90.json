{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"chartRef\",\n  style: {\n    width: '1000%',\n    height: '600%'\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_card = _resolveComponent(\"el-card\");\n  return _openBlock(), _createBlock(_component_el_card, null, {\n    default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */)]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["ref","style","width","height","_createBlock","_component_el_card","default","_withCtx","_createElementVNode","_hoisted_1","_"],"sources":["D:\\code\\bugzilla\\527\\front-end\\src\\components\\BarChart.vue"],"sourcesContent":["<template>\r\n    <el-card>\r\n        <div ref=\"chartRef\" :style=\"{ width: '1000%', height: '600%' }\"></div>\r\n    </el-card>\r\n</template>\r\n\r\n<script setup>\r\nimport * as echarts from \"echarts\";\r\nimport { defineProps, ref, onMounted, watch } from \"vue\";\r\nimport axios from 'axios';\r\n\r\n//axios\r\nconst sev = ref(null);\r\nconst data = ref(null);\r\nconst chartRef = ref(null);\r\n\r\nlet baseUrl = 'http://47.120.41.97:8002/bugs/'\r\n\r\nconst fetchRef = async () => {\r\n    try {\r\n        const response = await axios.get(baseUrl + 'statuses');\r\n        chartRef.value = response.data; // 假设后端返回的数据格式符合饼图需要的数据结构\r\n        if (chart) {\r\n            chart.setOption(getOption());\r\n        }\r\n        console.log(chartRef)\r\n\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n    }\r\n};\r\n\r\nconst fetchSev = async () => {\r\n    try {\r\n        const response = await axios.get(baseUrl + 'severity');\r\n        sev.value = response.data; // 假设后端返回的数据格式符合饼图需要的数据结构\r\n\r\n        console.log(sev)\r\n\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n    }\r\n};\r\n\r\nconst props = defineProps({\r\n    data: {\r\n        type: Array,\r\n        required: true\r\n    },\r\n    xAxisDataKey: {\r\n        type: String,\r\n        default: 'date'\r\n    },\r\n    yAxisDataKey: {\r\n        type: String,\r\n        default: 'value'\r\n    }\r\n});\r\n\r\nonMounted(() => {\r\n    initChart();\r\n});\r\n\r\nwatch(\r\n    () => props.data,\r\n    () => {\r\n        if (chart) {\r\n            chart.setOption(getOption());\r\n        }\r\n    },\r\n    { deep: true }\r\n);\r\n\r\nlet chart;\r\n\r\nconst getOption = () => {\r\n    const option = {\r\n        tooltip: {\r\n            trigger: 'axis',\r\n            axisPointer: {\r\n                // Use axis to trigger tooltip\r\n                type: 'shadow' // 'shadow' as default; can also be 'line' or 'shadow'\r\n            }\r\n        },\r\n        legend: {},\r\n        grid: {\r\n            left: '3%',\r\n            right: '4%',\r\n            bottom: '3%',\r\n            containLabel: true\r\n        },\r\n        xAxis: {\r\n            type: 'value'\r\n        },\r\n        yAxis: {\r\n            type: 'category',\r\n            data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\r\n        },\r\n        series: [\r\n            {\r\n                name: 'Direct',\r\n                type: 'bar',\r\n                stack: 'total',\r\n                label: {\r\n                    show: true\r\n                },\r\n                emphasis: {\r\n                    focus: 'series'\r\n                },\r\n                data: [320, 302, 301, 334, 390, 330, 320]\r\n            },\r\n            {\r\n                name: 'Mail Ad',\r\n                type: 'bar',\r\n                stack: 'total',\r\n                label: {\r\n                    show: true\r\n                },\r\n                emphasis: {\r\n                    focus: 'series'\r\n                },\r\n                data: [120, 132, 101, 134, 90, 230, 210]\r\n            },\r\n            {\r\n                name: 'Affiliate Ad',\r\n                type: 'bar',\r\n                stack: 'total',\r\n                label: {\r\n                    show: true\r\n                },\r\n                emphasis: {\r\n                    focus: 'series'\r\n                },\r\n                data: [220, 182, 191, 234, 290, 330, 310]\r\n            },\r\n            {\r\n                name: 'Video Ad',\r\n                type: 'bar',\r\n                stack: 'total',\r\n                label: {\r\n                    show: true\r\n                },\r\n                emphasis: {\r\n                    focus: 'series'\r\n                },\r\n                data: [150, 212, 201, 154, 190, 330, 410]\r\n            },\r\n            {\r\n                name: 'Search Engine',\r\n                type: 'bar',\r\n                stack: 'total',\r\n                label: {\r\n                    show: true\r\n                },\r\n                emphasis: {\r\n                    focus: 'series'\r\n                },\r\n                data: [820, 832, 901, 934, 1290, 1330, 1320]\r\n            }\r\n        ]\r\n    };\r\n\r\n    for (const serie of seriesData) {\r\n        option.series.push({\r\n            name: serie.name,\r\n            type: 'bar',\r\n            stack: 'total',\r\n            label: { show: true },\r\n            emphasis: { focus: 'series' },\r\n            data: serie.data\r\n        });\r\n    }\r\n\r\n    return option;\r\n};\r\n\r\n\r\n// {\r\n//     return {\r\n//         xAxis: {\r\n//             type: 'category',\r\n//             data: props.data.map(item => item[props.xAxisDataKey])\r\n//         },\r\n//         yAxis: {\r\n//             type: 'value'\r\n//         },\r\n//         series: [\r\n//             {\r\n//                 data: props.data.map(item => item[props.yAxisDataKey]),\r\n//                 type: 'bar'\r\n//             }\r\n//         ]\r\n//     };\r\n// };\r\n\r\nconst initChart = () => {\r\n    fetchRef();\r\n    fetchSev();\r\n    chart = echarts.init(chartRef.value);\r\n    chart.setOption(getOption());\r\n};\r\n\r\n</script>"],"mappings":";;EAEaA,GAAG,EAAC,UAAU;EAAEC,KAAK,EAAE;IAAAC,KAAA;IAAAC,MAAA;EAAA;;;;uBADhCC,YAAA,CAEUC,kBAAA;IAHdC,OAAA,EAAAC,QAAA,CAEQ,MAAsE,CAAtEC,mBAAA,CAAsE,OAAtEC,UAAsE,8B;IAF9EC,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}