{"ast":null,"code":"import toString from './toString.js';\nimport unescapeHtmlChar from './_unescapeHtmlChar.js';\n\n/** Used to match HTML entities and HTML characters. */\nvar reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\n  reHasEscapedHtml = RegExp(reEscapedHtml.source);\n\n/**\r\n * The inverse of `_.escape`; this method converts the HTML entities\r\n * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\r\n * their corresponding characters.\r\n *\r\n * **Note:** No other HTML entities are unescaped. To unescape additional\r\n * HTML entities use a third-party library like [_he_](https://mths.be/he).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.6.0\r\n * @category String\r\n * @param {string} [string=''] The string to unescape.\r\n * @returns {string} Returns the unescaped string.\r\n * @example\r\n *\r\n * _.unescape('fred, barney, &amp; pebbles');\r\n * // => 'fred, barney, & pebbles'\r\n */\nfunction unescape(string) {\n  string = toString(string);\n  return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;\n}\nexport default unescape;","map":{"version":3,"names":["toString","unescapeHtmlChar","reEscapedHtml","reHasEscapedHtml","RegExp","source","unescape","string","test","replace"],"sources":["D:/code/bugzilla/527/front-end/node_modules/lodash-es/unescape.js"],"sourcesContent":["import toString from './toString.js';\r\nimport unescapeHtmlChar from './_unescapeHtmlChar.js';\r\n\r\n/** Used to match HTML entities and HTML characters. */\r\nvar reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\r\n    reHasEscapedHtml = RegExp(reEscapedHtml.source);\r\n\r\n/**\r\n * The inverse of `_.escape`; this method converts the HTML entities\r\n * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\r\n * their corresponding characters.\r\n *\r\n * **Note:** No other HTML entities are unescaped. To unescape additional\r\n * HTML entities use a third-party library like [_he_](https://mths.be/he).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.6.0\r\n * @category String\r\n * @param {string} [string=''] The string to unescape.\r\n * @returns {string} Returns the unescaped string.\r\n * @example\r\n *\r\n * _.unescape('fred, barney, &amp; pebbles');\r\n * // => 'fred, barney, & pebbles'\r\n */\r\nfunction unescape(string) {\r\n  string = toString(string);\r\n  return (string && reHasEscapedHtml.test(string))\r\n    ? string.replace(reEscapedHtml, unescapeHtmlChar)\r\n    : string;\r\n}\r\n\r\nexport default unescape;\r\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,eAAe;AACpC,OAAOC,gBAAgB,MAAM,wBAAwB;;AAErD;AACA,IAAIC,aAAa,GAAG,2BAA2B;EAC3CC,gBAAgB,GAAGC,MAAM,CAACF,aAAa,CAACG,MAAM,CAAC;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,QAAQA,CAACC,MAAM,EAAE;EACxBA,MAAM,GAAGP,QAAQ,CAACO,MAAM,CAAC;EACzB,OAAQA,MAAM,IAAIJ,gBAAgB,CAACK,IAAI,CAACD,MAAM,CAAC,GAC3CA,MAAM,CAACE,OAAO,CAACP,aAAa,EAAED,gBAAgB,CAAC,GAC/CM,MAAM;AACZ;AAEA,eAAeD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}