{"ast":null,"code":"import assignMergeValue from './_assignMergeValue.js';\nimport cloneBuffer from './_cloneBuffer.js';\nimport cloneTypedArray from './_cloneTypedArray.js';\nimport copyArray from './_copyArray.js';\nimport initCloneObject from './_initCloneObject.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\nimport isBuffer from './isBuffer.js';\nimport isFunction from './isFunction.js';\nimport isObject from './isObject.js';\nimport isPlainObject from './isPlainObject.js';\nimport isTypedArray from './isTypedArray.js';\nimport safeGet from './_safeGet.js';\nimport toPlainObject from './toPlainObject.js';\n\n/**\r\n * A specialized version of `baseMerge` for arrays and objects which performs\r\n * deep merges and tracks traversed objects enabling objects with circular\r\n * references to be merged.\r\n *\r\n * @private\r\n * @param {Object} object The destination object.\r\n * @param {Object} source The source object.\r\n * @param {string} key The key of the value to merge.\r\n * @param {number} srcIndex The index of `source`.\r\n * @param {Function} mergeFunc The function to merge values.\r\n * @param {Function} [customizer] The function to customize assigned values.\r\n * @param {Object} [stack] Tracks traversed source values and their merged\r\n *  counterparts.\r\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = safeGet(object, key),\n    srcValue = safeGet(source, key),\n    stacked = stack.get(srcValue);\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;\n  var isCommon = newValue === undefined;\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n      isBuff = !isArr && isBuffer(srcValue),\n      isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      } else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      } else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      } else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      } else {\n        newValue = [];\n      }\n    } else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      } else if (!isObject(objValue) || isFunction(objValue)) {\n        newValue = initCloneObject(srcValue);\n      }\n    } else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\nexport default baseMergeDeep;","map":{"version":3,"names":["assignMergeValue","cloneBuffer","cloneTypedArray","copyArray","initCloneObject","isArguments","isArray","isArrayLikeObject","isBuffer","isFunction","isObject","isPlainObject","isTypedArray","safeGet","toPlainObject","baseMergeDeep","object","source","key","srcIndex","mergeFunc","customizer","stack","objValue","srcValue","stacked","get","newValue","undefined","isCommon","isArr","isBuff","isTyped","set"],"sources":["D:/code/bugzilla/527/front-end/node_modules/lodash-es/_baseMergeDeep.js"],"sourcesContent":["import assignMergeValue from './_assignMergeValue.js';\r\nimport cloneBuffer from './_cloneBuffer.js';\r\nimport cloneTypedArray from './_cloneTypedArray.js';\r\nimport copyArray from './_copyArray.js';\r\nimport initCloneObject from './_initCloneObject.js';\r\nimport isArguments from './isArguments.js';\r\nimport isArray from './isArray.js';\r\nimport isArrayLikeObject from './isArrayLikeObject.js';\r\nimport isBuffer from './isBuffer.js';\r\nimport isFunction from './isFunction.js';\r\nimport isObject from './isObject.js';\r\nimport isPlainObject from './isPlainObject.js';\r\nimport isTypedArray from './isTypedArray.js';\r\nimport safeGet from './_safeGet.js';\r\nimport toPlainObject from './toPlainObject.js';\r\n\r\n/**\r\n * A specialized version of `baseMerge` for arrays and objects which performs\r\n * deep merges and tracks traversed objects enabling objects with circular\r\n * references to be merged.\r\n *\r\n * @private\r\n * @param {Object} object The destination object.\r\n * @param {Object} source The source object.\r\n * @param {string} key The key of the value to merge.\r\n * @param {number} srcIndex The index of `source`.\r\n * @param {Function} mergeFunc The function to merge values.\r\n * @param {Function} [customizer] The function to customize assigned values.\r\n * @param {Object} [stack] Tracks traversed source values and their merged\r\n *  counterparts.\r\n */\r\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\r\n  var objValue = safeGet(object, key),\r\n      srcValue = safeGet(source, key),\r\n      stacked = stack.get(srcValue);\r\n\r\n  if (stacked) {\r\n    assignMergeValue(object, key, stacked);\r\n    return;\r\n  }\r\n  var newValue = customizer\r\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\r\n    : undefined;\r\n\r\n  var isCommon = newValue === undefined;\r\n\r\n  if (isCommon) {\r\n    var isArr = isArray(srcValue),\r\n        isBuff = !isArr && isBuffer(srcValue),\r\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\r\n\r\n    newValue = srcValue;\r\n    if (isArr || isBuff || isTyped) {\r\n      if (isArray(objValue)) {\r\n        newValue = objValue;\r\n      }\r\n      else if (isArrayLikeObject(objValue)) {\r\n        newValue = copyArray(objValue);\r\n      }\r\n      else if (isBuff) {\r\n        isCommon = false;\r\n        newValue = cloneBuffer(srcValue, true);\r\n      }\r\n      else if (isTyped) {\r\n        isCommon = false;\r\n        newValue = cloneTypedArray(srcValue, true);\r\n      }\r\n      else {\r\n        newValue = [];\r\n      }\r\n    }\r\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\r\n      newValue = objValue;\r\n      if (isArguments(objValue)) {\r\n        newValue = toPlainObject(objValue);\r\n      }\r\n      else if (!isObject(objValue) || isFunction(objValue)) {\r\n        newValue = initCloneObject(srcValue);\r\n      }\r\n    }\r\n    else {\r\n      isCommon = false;\r\n    }\r\n  }\r\n  if (isCommon) {\r\n    // Recursively merge objects and arrays (susceptible to call stack limits).\r\n    stack.set(srcValue, newValue);\r\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\r\n    stack['delete'](srcValue);\r\n  }\r\n  assignMergeValue(object, key, newValue);\r\n}\r\n\r\nexport default baseMergeDeep;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}