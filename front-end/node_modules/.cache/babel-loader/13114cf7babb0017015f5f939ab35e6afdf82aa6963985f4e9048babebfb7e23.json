{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-6a1c0054\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  id: \"KMapChart\",\n  class: \"k-map-chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","class","_createElementBlock","_hoisted_1"],"sources":["D:\\code\\qd\\seme\\zmz\\front-end\\src\\components\\KMapCharts.vue"],"sourcesContent":["<template>\n  <div id=\"KMapChart\" class=\"k-map-chart\"></div>\n</template>\n\n<script setup>\nimport { onMounted, ref, getCurrentInstance } from \"vue\";\nvar echarts = require(\"echarts/lib/echarts\");\nrequire(\"echarts/lib/chart/graph\");\nrequire(\"echarts/lib/component/tooltip\");\nrequire(\"echarts/lib/component/title\");\n\nimport \"../mock/KMapMock\";\n\nconst { proxy } = getCurrentInstance();\nlet KMapChart = null;\nlet kMapData = {};\nconst seriesData = ref([]);\nconst seriesLinks = ref([]);\nconst categories = ref([]);\n// const lastClickId = ref(\"\");\nconst colors = [\n  \"#a3d2ca\",\n  \"#056676\",\n  \"#ea2c62\",\n  \"#16a596\",\n  \"#03c4a1\",\n  \"#f5a25d\",\n  \"#8CD282\",\n  \"#32e0c4\",\n  \"#00FAE1\",\n  \"#f05454\",\n];\n\nonMounted(async () => {\n  await initKMapData();\n  console.log(\"完成init\", kMapData);\n  formatData(kMapData);\n\n  initKMapChart(); // 调用渲染函数\n});\n\n/**\n * 初始化图表数据\n */\nasync function initKMapData() {\n  return new Promise((resolve, reject) => {\n    proxy\n      .$axios({\n        url: \"/getKMapData\",\n        method: \"get\",\n      })\n      .then((res) => {\n        kMapData = res.data.dataset;\n        resolve(); // 请求成功后调用 resolve\n      })\n      .catch((error) => {\n        reject(error); // 请求失败时调用 reject\n      });\n  });\n}\n\n/**\n * 节点点击事件\n */\nasync function nodeClick(params) {\n  const index = seriesData.value.findIndex(\n    (item) => item.id === params.data.id\n  );\n  console.log(\"点了节点：\" + (index + 1), \"clicked\");\n}\n\n/**\n * 设置echarts配置项,重绘画布\n */\nasync function initKMapChart() {\n  if (!KMapChart) {\n    console.log(\"KMapChart开始初始化\");\n    KMapChart = echarts.init(document.getElementById(\"KMapChart\"));\n    KMapChart.on(\"click\", (params) => {\n      if (params.dataType === \"node\") {\n        nodeClick(params); //判断点击的是图表的节点部分\n      }\n    });\n  }\n  // 指定图表的配置项和数据\n  let option = {\n    animationDurationUpdate: 500, // 动画更新变化时间\n    animationEasingUpdate: \"quinticInOut\",\n    tooltip: {\n      show: false,\n    },\n    series: [\n      {\n        type: \"graph\",\n        layout: \"force\",\n        legendHoverLink: true, //是否启用图例 hover(悬停) 时的联动高亮。\n        hoverAnimation: true, //是否开启鼠标悬停节点的显示动画\n        focusNodeAdjacency: true,\n        edgeLabel: {\n          position: \"middle\", //边上的文字样式\n          normal: {\n            show: true,\n            textStyle: {\n              fontSize: 12,\n            },\n            position: \"middle\",\n            formatter: function (x) {\n              return x.data.name;\n            },\n          },\n        },\n        edgeSymbol: [\"\", \"arrow\"],\n        force: {\n          edgeLength: 15,\n          repulsion: 200,\n        },\n        roam: true,\n        draggable: true, //每个节点的拖拉\n        itemStyle: {\n          normal: {\n            color: \"#00FAE1\",\n            cursor: \"pointer\",\n            label: {\n              show: true,\n              position: [-10, -15],\n              textStyle: {\n                //标签的字体样式\n                color: \"#AB8\", //字体颜色\n                fontStyle: \"normal\", //文字字体的风格 'normal'标准 'italic'斜体 'oblique' 倾斜\n                fontWeight: \"bold\", //'normal'标准'bold'粗的'bolder'更粗的'lighter'更细的或100 | 200 | 300 | 400...\n                fontFamily: \"sans-serif\", //文字的字体系列\n                fontSize: 12, //字体大小\n              },\n            },\n            nodeStyle: {\n              brushType: \"both\",\n              borderColor: \"rgba(255,215,0,0.4)\",\n              borderWidth: 1,\n            },\n          },\n          emphasis: {\n            //鼠标放上去有阴影效果\n            shadowColor: \"#00FAE1\",\n            shadowOffsetX: 0,\n            shadowOffsetY: 0,\n            shadowBlur: 40,\n          },\n        },\n        lineStyle: {\n          width: 2,\n        },\n        label: {\n          fontSize: 18,\n        },\n        symbolSize: 24, //节点大小\n        links: seriesLinks.value,\n        data: seriesData.value,\n        categories: categories.value,\n        cursor: \"pointer\",\n      },\n    ],\n  };\n  // 使用刚指定的配置项和数据显示图表。\n  KMapChart.setOption(option);\n}\n\n/**\n * 格式化数据到表格需要的数据\n */\nfunction formatData(list) {\n  let nodes = list.nodes;\n  let links = list.links;\n  console.log(\"nodes:\", nodes);\n  console.log(\"links:\", links);\n\n  let colorIndex = 0;\n  let loadedCat = [];\n  nodes.forEach((item) => {\n    if (item.categary && loadedCat.indexOf(item.categary) === -1) {\n      colorIndex = Math.floor(Math.random() * colors.length);\n      loadedCat.push(item.categary);\n      categories.value.push({ name: item.categary });\n    }\n    item.itemStyle = {\n      color: colors[colorIndex],\n      borderColor: \"#ffffff\",\n    };\n    seriesData.value.push(item);\n  });\n  links.forEach((item) => {\n    seriesLinks.value.push(item);\n  });\n  console.log(\"seriesData:\", seriesData.value);\n  console.log(\"seriesLinks:\", seriesLinks.value);\n}\n</script>\n\n<style scoped>\n.k-map-chart {\n  height: 80vh;\n  width: 100%;\n}\n</style>"],"mappings":";;;EACOA,EAAE,EAAC,WAAW;EAACC,KAAK,EAAC;;;uBAA1BC,mBAAA,CAA8C,OAA9CC,UAA8C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}