{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"chartRef\",\n  style: {\n    width: '600%',\n    height: '600%'\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_card = _resolveComponent(\"el-card\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_el_card), _createElementVNode(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["ref","style","width","height","_createElementBlock","_Fragment","_createVNode","_component_el_card","_createElementVNode","_hoisted_1"],"sources":["D:\\code\\bugzilla\\527\\front-end\\src\\components\\LineChart.vue"],"sourcesContent":["<template>\r\n    <el-card></el-card>\r\n    <div ref=\"chartRef\" :style=\"{ width: '600%', height: '600%' }\"></div>\r\n</template>\r\n\r\n<script setup>\r\nimport * as echarts from \"echarts\";\r\nimport { defineProps, ref, onMounted, watch } from \"vue\";\r\n\r\nconst props = defineProps({\r\n    data: {\r\n        type: Array,\r\n        required: true\r\n    },\r\n    xAxisDataKey: {\r\n        type: String,\r\n        default: 'date'\r\n    },\r\n    yAxisDataKey: {\r\n        type: String,\r\n        default: 'value'\r\n    }\r\n});\r\n\r\nconst chartRef = ref(null);\r\n\r\nonMounted(() => {\r\n    initChart();\r\n});\r\n\r\nwatch(\r\n    () => props.data,\r\n    () => {\r\n        if (chart) {\r\n            chart.setOption(getOption());\r\n        }\r\n    },\r\n    { deep: true }\r\n);\r\n\r\nlet chart;\r\n\r\nconst getOption = () => {\r\n    return {\r\n        xAxis: {\r\n            type: 'category',\r\n            data: props.data.map(item => item[props.xAxisDataKey])\r\n        },\r\n        yAxis: {\r\n            type: 'value'\r\n        },\r\n        series: [\r\n            {\r\n                data: props.data.map(item => item[props.yAxisDataKey]),\r\n                type: 'line'\r\n            }\r\n        ]\r\n    };\r\n};\r\n\r\nconst initChart = () => {\r\n    chart = echarts.init(chartRef.value);\r\n    chart.setOption(getOption());\r\n};\r\n\r\n</script>"],"mappings":";;EAESA,GAAG,EAAC,UAAU;EAAEC,KAAK,EAAE;IAAAC,KAAA;IAAAC,MAAA;EAAA;;;;uBAFhCC,mBAAA,CAAAC,SAAA,SACIC,YAAA,CAAmBC,kBAAA,GACnBC,mBAAA,CAAqE,OAArEC,UAAqE,8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}