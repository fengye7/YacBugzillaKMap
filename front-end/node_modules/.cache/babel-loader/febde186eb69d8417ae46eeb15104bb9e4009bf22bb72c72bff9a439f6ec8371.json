{"ast":null,"code":"import baseToString from './_baseToString.js';\nimport castSlice from './_castSlice.js';\nimport charsEndIndex from './_charsEndIndex.js';\nimport stringToArray from './_stringToArray.js';\nimport toString from './toString.js';\nimport trimmedEndIndex from './_trimmedEndIndex.js';\n\n/**\r\n * Removes trailing whitespace or specified characters from `string`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category String\r\n * @param {string} [string=''] The string to trim.\r\n * @param {string} [chars=whitespace] The characters to trim.\r\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n * @returns {string} Returns the trimmed string.\r\n * @example\r\n *\r\n * _.trimEnd('  abc  ');\r\n * // => '  abc'\r\n *\r\n * _.trimEnd('-_-abc-_-', '_-');\r\n * // => '-_-abc'\r\n */\nfunction trimEnd(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.slice(0, trimmedEndIndex(string) + 1);\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n    end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n  return castSlice(strSymbols, 0, end).join('');\n}\nexport default trimEnd;","map":{"version":3,"names":["baseToString","castSlice","charsEndIndex","stringToArray","toString","trimmedEndIndex","trimEnd","string","chars","guard","undefined","slice","strSymbols","end","join"],"sources":["D:/code/bugzilla/527/front-end/node_modules/lodash-es/trimEnd.js"],"sourcesContent":["import baseToString from './_baseToString.js';\r\nimport castSlice from './_castSlice.js';\r\nimport charsEndIndex from './_charsEndIndex.js';\r\nimport stringToArray from './_stringToArray.js';\r\nimport toString from './toString.js';\r\nimport trimmedEndIndex from './_trimmedEndIndex.js';\r\n\r\n/**\r\n * Removes trailing whitespace or specified characters from `string`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category String\r\n * @param {string} [string=''] The string to trim.\r\n * @param {string} [chars=whitespace] The characters to trim.\r\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n * @returns {string} Returns the trimmed string.\r\n * @example\r\n *\r\n * _.trimEnd('  abc  ');\r\n * // => '  abc'\r\n *\r\n * _.trimEnd('-_-abc-_-', '_-');\r\n * // => '-_-abc'\r\n */\r\nfunction trimEnd(string, chars, guard) {\r\n  string = toString(string);\r\n  if (string && (guard || chars === undefined)) {\r\n    return string.slice(0, trimmedEndIndex(string) + 1);\r\n  }\r\n  if (!string || !(chars = baseToString(chars))) {\r\n    return string;\r\n  }\r\n  var strSymbols = stringToArray(string),\r\n      end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\r\n\r\n  return castSlice(strSymbols, 0, end).join('');\r\n}\r\n\r\nexport default trimEnd;\r\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,oBAAoB;AAC7C,OAAOC,SAAS,MAAM,iBAAiB;AACvC,OAAOC,aAAa,MAAM,qBAAqB;AAC/C,OAAOC,aAAa,MAAM,qBAAqB;AAC/C,OAAOC,QAAQ,MAAM,eAAe;AACpC,OAAOC,eAAe,MAAM,uBAAuB;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAOA,CAACC,MAAM,EAAEC,KAAK,EAAEC,KAAK,EAAE;EACrCF,MAAM,GAAGH,QAAQ,CAACG,MAAM,CAAC;EACzB,IAAIA,MAAM,KAAKE,KAAK,IAAID,KAAK,KAAKE,SAAS,CAAC,EAAE;IAC5C,OAAOH,MAAM,CAACI,KAAK,CAAC,CAAC,EAAEN,eAAe,CAACE,MAAM,CAAC,GAAG,CAAC,CAAC;EACrD;EACA,IAAI,CAACA,MAAM,IAAI,EAAEC,KAAK,GAAGR,YAAY,CAACQ,KAAK,CAAC,CAAC,EAAE;IAC7C,OAAOD,MAAM;EACf;EACA,IAAIK,UAAU,GAAGT,aAAa,CAACI,MAAM,CAAC;IAClCM,GAAG,GAAGX,aAAa,CAACU,UAAU,EAAET,aAAa,CAACK,KAAK,CAAC,CAAC,GAAG,CAAC;EAE7D,OAAOP,SAAS,CAACW,UAAU,EAAE,CAAC,EAAEC,GAAG,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;AAC/C;AAEA,eAAeR,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}