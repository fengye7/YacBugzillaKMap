{"ast":null,"code":"import baseToString from './_baseToString.js';\nimport baseTrim from './_baseTrim.js';\nimport castSlice from './_castSlice.js';\nimport charsEndIndex from './_charsEndIndex.js';\nimport charsStartIndex from './_charsStartIndex.js';\nimport stringToArray from './_stringToArray.js';\nimport toString from './toString.js';\n\n/**\r\n * Removes leading and trailing whitespace or specified characters from `string`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.0.0\r\n * @category String\r\n * @param {string} [string=''] The string to trim.\r\n * @param {string} [chars=whitespace] The characters to trim.\r\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n * @returns {string} Returns the trimmed string.\r\n * @example\r\n *\r\n * _.trim('  abc  ');\r\n * // => 'abc'\r\n *\r\n * _.trim('-_-abc-_-', '_-');\r\n * // => 'abc'\r\n *\r\n * _.map(['  foo  ', '  bar  '], _.trim);\r\n * // => ['foo', 'bar']\r\n */\nfunction trim(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return baseTrim(string);\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n    chrSymbols = stringToArray(chars),\n    start = charsStartIndex(strSymbols, chrSymbols),\n    end = charsEndIndex(strSymbols, chrSymbols) + 1;\n  return castSlice(strSymbols, start, end).join('');\n}\nexport default trim;","map":{"version":3,"names":["baseToString","baseTrim","castSlice","charsEndIndex","charsStartIndex","stringToArray","toString","trim","string","chars","guard","undefined","strSymbols","chrSymbols","start","end","join"],"sources":["D:/code/bugzilla/527/front-end/node_modules/lodash-es/trim.js"],"sourcesContent":["import baseToString from './_baseToString.js';\r\nimport baseTrim from './_baseTrim.js';\r\nimport castSlice from './_castSlice.js';\r\nimport charsEndIndex from './_charsEndIndex.js';\r\nimport charsStartIndex from './_charsStartIndex.js';\r\nimport stringToArray from './_stringToArray.js';\r\nimport toString from './toString.js';\r\n\r\n/**\r\n * Removes leading and trailing whitespace or specified characters from `string`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.0.0\r\n * @category String\r\n * @param {string} [string=''] The string to trim.\r\n * @param {string} [chars=whitespace] The characters to trim.\r\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n * @returns {string} Returns the trimmed string.\r\n * @example\r\n *\r\n * _.trim('  abc  ');\r\n * // => 'abc'\r\n *\r\n * _.trim('-_-abc-_-', '_-');\r\n * // => 'abc'\r\n *\r\n * _.map(['  foo  ', '  bar  '], _.trim);\r\n * // => ['foo', 'bar']\r\n */\r\nfunction trim(string, chars, guard) {\r\n  string = toString(string);\r\n  if (string && (guard || chars === undefined)) {\r\n    return baseTrim(string);\r\n  }\r\n  if (!string || !(chars = baseToString(chars))) {\r\n    return string;\r\n  }\r\n  var strSymbols = stringToArray(string),\r\n      chrSymbols = stringToArray(chars),\r\n      start = charsStartIndex(strSymbols, chrSymbols),\r\n      end = charsEndIndex(strSymbols, chrSymbols) + 1;\r\n\r\n  return castSlice(strSymbols, start, end).join('');\r\n}\r\n\r\nexport default trim;\r\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,oBAAoB;AAC7C,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAOC,SAAS,MAAM,iBAAiB;AACvC,OAAOC,aAAa,MAAM,qBAAqB;AAC/C,OAAOC,eAAe,MAAM,uBAAuB;AACnD,OAAOC,aAAa,MAAM,qBAAqB;AAC/C,OAAOC,QAAQ,MAAM,eAAe;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,IAAIA,CAACC,MAAM,EAAEC,KAAK,EAAEC,KAAK,EAAE;EAClCF,MAAM,GAAGF,QAAQ,CAACE,MAAM,CAAC;EACzB,IAAIA,MAAM,KAAKE,KAAK,IAAID,KAAK,KAAKE,SAAS,CAAC,EAAE;IAC5C,OAAOV,QAAQ,CAACO,MAAM,CAAC;EACzB;EACA,IAAI,CAACA,MAAM,IAAI,EAAEC,KAAK,GAAGT,YAAY,CAACS,KAAK,CAAC,CAAC,EAAE;IAC7C,OAAOD,MAAM;EACf;EACA,IAAII,UAAU,GAAGP,aAAa,CAACG,MAAM,CAAC;IAClCK,UAAU,GAAGR,aAAa,CAACI,KAAK,CAAC;IACjCK,KAAK,GAAGV,eAAe,CAACQ,UAAU,EAAEC,UAAU,CAAC;IAC/CE,GAAG,GAAGZ,aAAa,CAACS,UAAU,EAAEC,UAAU,CAAC,GAAG,CAAC;EAEnD,OAAOX,SAAS,CAACU,UAAU,EAAEE,KAAK,EAAEC,GAAG,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;AACnD;AAEA,eAAeT,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}