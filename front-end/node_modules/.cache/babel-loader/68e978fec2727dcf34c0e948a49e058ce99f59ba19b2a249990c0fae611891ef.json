{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-6a1c0054\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"KMapChart\",\n  class: \"k-map-chart\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_2 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_container = _resolveComponent(\"el-container\");\n  return _openBlock(), _createBlock(_component_el_container, null, {\n    default: _withCtx(() => [_hoisted_1, _createElementVNode(\"div\", null, [_createElementVNode(\"button\", {\n      onClick: $setup.fetchData\n    }, \"Fetch Data\"), $setup.testdata ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"p\", null, _toDisplayString($setup.testdata), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)])]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["_createElementVNode","id","class","key","_createBlock","_component_el_container","default","_withCtx","_hoisted_1","onClick","$setup","fetchData","testdata","_createElementBlock","_hoisted_2","_toDisplayString","_createCommentVNode","_"],"sources":["D:\\Files\\Code\\CoursesProjects\\YacBugzilla_KnowledgeMap\\front-end\\src\\components\\KMapCharts.vue"],"sourcesContent":["<template>\r\n  <el-container><div id=\"KMapChart\" class=\"k-map-chart\"></div>\r\n   <div>\r\n    <button @click=\"fetchData\">Fetch Data</button>\r\n    <div v-if=\"testdata\">\r\n      <p>{{ testdata }}</p>\r\n    </div>\r\n  </div>\r\n  </el-container>\r\n</template>\r\n\r\n<script setup>\r\nimport { onMounted, ref } from \"vue\";\r\nvar echarts = require(\"echarts/lib/echarts\");\r\nrequire(\"echarts/lib/chart/graph\");\r\nrequire(\"echarts/lib/component/tooltip\");\r\nrequire(\"echarts/lib/component/title\");\r\n  import {getKMapData} from '@/api/KMapAPI.js'\r\n\r\nimport \"../mock/KMapMock\";\r\nimport { MockAPI } from \"@/utils/request\";\r\nlet KMapChart = null;\r\nlet kMapData = {};\r\nconst seriesData = ref([]);\r\nconst seriesLinks = ref([]);\r\nconst categories = ref([]);\r\n// const lastClickId = ref(\"\");\r\nconst colors = [\r\n  \"#a3d2ca\",\r\n  \"#056676\",\r\n  \"#ea2c62\",\r\n  \"#16a596\",\r\n  \"#03c4a1\",\r\n  \"#f5a25d\",\r\n  \"#8CD282\",\r\n  \"#32e0c4\",\r\n  \"#00FAE1\",\r\n  \"#f05454\",\r\n];\r\n\r\nonMounted(async () => {\r\n  await initKMapData();\r\n  console.log(\"完成init\", kMapData);\r\n  formatData(kMapData);\r\n\r\n  initKMapChart(); // 调用渲染函数\r\n});\r\n\r\nlet testdata = ref(null);\r\nasync function fetchData() {\r\n      try {\r\n        testdata = await getKMapData();\r\n        console.log(testdata);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    }\r\n\r\n/**\r\n * 初始化图表数据\r\n */\r\nasync function initKMapData() {\r\n  return new Promise((resolve, reject) => {\r\n    MockAPI.get(\"kMap/getKMapDataMock\")\r\n      .then((res) => {\r\n        kMapData = res.data.dataset;\r\n        resolve(); // 请求成功后调用 resolve\r\n      })\r\n      .catch((error) => {\r\n        reject(error); // 请求失败时调用 reject\r\n      });\r\n  });\r\n}\r\n\r\n/**\r\n * 节点点击事件\r\n */\r\nasync function nodeClick(params) {\r\n  const index = seriesData.value.findIndex(\r\n    (item) => item.id === params.data.id\r\n  );\r\n  console.log(\"点了节点：\" + (index + 1), \"clicked\");\r\n}\r\n\r\n/**\r\n * 设置echarts配置项,重绘画布\r\n */\r\nasync function initKMapChart() {\r\n  if (!KMapChart) {\r\n    console.log(\"KMapChart开始初始化\");\r\n    KMapChart = echarts.init(document.getElementById(\"KMapChart\"));\r\n    KMapChart.on(\"click\", (params) => {\r\n      if (params.dataType === \"node\") {\r\n        nodeClick(params); //判断点击的是图表的节点部分\r\n      }\r\n    });\r\n  }\r\n  // 指定图表的配置项和数据\r\n  let option = {\r\n    animationDurationUpdate: 500, // 动画更新变化时间\r\n    animationEasingUpdate: \"quinticInOut\",\r\n    tooltip: {\r\n      show: false,\r\n    },\r\n    series: [\r\n      {\r\n        type: \"graph\",\r\n        layout: \"force\",\r\n        legendHoverLink: true, //是否启用图例 hover(悬停) 时的联动高亮。\r\n        hoverAnimation: true, //是否开启鼠标悬停节点的显示动画\r\n        focusNodeAdjacency: true,\r\n        edgeLabel: {\r\n          position: \"middle\", //边上的文字样式\r\n          normal: {\r\n            show: true,\r\n            textStyle: {\r\n              fontSize: 12,\r\n            },\r\n            position: \"middle\",\r\n            formatter: function (x) {\r\n              return x.data.name;\r\n            },\r\n          },\r\n        },\r\n        edgeSymbol: [\"\", \"arrow\"],\r\n        force: {\r\n          edgeLength: 15,\r\n          repulsion: 200,\r\n        },\r\n        roam: true,\r\n        draggable: true, //每个节点的拖拉\r\n        itemStyle: {\r\n          normal: {\r\n            color: \"#00FAE1\",\r\n            cursor: \"pointer\",\r\n            label: {\r\n              show: true,\r\n              position: [-10, -15],\r\n              textStyle: {\r\n                //标签的字体样式\r\n                color: \"#AB8\", //字体颜色\r\n                fontStyle: \"normal\", //文字字体的风格 'normal'标准 'italic'斜体 'oblique' 倾斜\r\n                fontWeight: \"bold\", //'normal'标准'bold'粗的'bolder'更粗的'lighter'更细的或100 | 200 | 300 | 400...\r\n                fontFamily: \"sans-serif\", //文字的字体系列\r\n                fontSize: 12, //字体大小\r\n              },\r\n            },\r\n            nodeStyle: {\r\n              brushType: \"both\",\r\n              borderColor: \"rgba(255,215,0,0.4)\",\r\n              borderWidth: 1,\r\n            },\r\n          },\r\n          emphasis: {\r\n            //鼠标放上去有阴影效果\r\n            shadowColor: \"#00FAE1\",\r\n            shadowOffsetX: 0,\r\n            shadowOffsetY: 0,\r\n            shadowBlur: 40,\r\n          },\r\n        },\r\n        lineStyle: {\r\n          width: 2,\r\n        },\r\n        label: {\r\n          fontSize: 18,\r\n        },\r\n        symbolSize: 24, //节点大小\r\n        links: seriesLinks.value,\r\n        data: seriesData.value,\r\n        categories: categories.value,\r\n        cursor: \"pointer\",\r\n      },\r\n    ],\r\n  };\r\n  // 使用刚指定的配置项和数据显示图表。\r\n  KMapChart.setOption(option);\r\n}\r\n\r\n/**\r\n * 格式化数据到表格需要的数据\r\n */\r\nfunction formatData(list) {\r\n  let nodes = list.nodes;\r\n  let links = list.links;\r\n  console.log(\"nodes:\", nodes);\r\n  console.log(\"links:\", links);\r\n\r\n  let colorIndex = 0;\r\n  let loadedCat = [];\r\n  nodes.forEach((item) => {\r\n    if (item.categary && loadedCat.indexOf(item.categary) === -1) {\r\n      colorIndex = Math.floor(Math.random() * colors.length);\r\n      loadedCat.push(item.categary);\r\n      categories.value.push({ name: item.categary });\r\n    }\r\n    item.itemStyle = {\r\n      color: colors[colorIndex],\r\n      borderColor: \"#ffffff\",\r\n    };\r\n    seriesData.value.push(item);\r\n  });\r\n  links.forEach((item) => {\r\n    seriesLinks.value.push(item);\r\n  });\r\n  console.log(\"seriesData:\", seriesData.value);\r\n  console.log(\"seriesLinks:\", seriesLinks.value);\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.k-map-chart {\r\n  height: 80vh;\r\n  width: 100%;\r\n}\r\n</style>"],"mappings":";;gEACgBA,mBAAA,CAA8C;EAAzCC,EAAE,EAAC,WAAW;EAACC,KAAK,EAAC;;;EAD1CC,GAAA;AAAA;;;uBACEC,YAAA,CAOeC,uBAAA;IARjBC,OAAA,EAAAC,QAAA,CACgB,MAA8C,CAA9CC,UAA8C,EAC3DR,mBAAA,CAKK,cAJJA,mBAAA,CAA8C;MAArCS,OAAK,EAAEC,MAAA,CAAAC;IAAS,GAAE,YAAU,GAC1BD,MAAA,CAAAE,QAAQ,I,cAAnBC,mBAAA,CAEM,OANVC,UAAA,GAKMd,mBAAA,CAAqB,WAAAe,gBAAA,CAAfL,MAAA,CAAAE,QAAQ,iB,KALpBI,mBAAA,e;IAAAC,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}