{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, withCtx as _withCtx, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"chartRef\",\n  style: {\n    width: '100%',\n    height: '600%'\n  }\n};\nexport function render(_ctx, _cache) {\n  const _component_el_progress = _resolveComponent(\"el-progress\");\n  const _component_el_card = _resolveComponent(\"el-card\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_el_progress, {\n    percentage: _ctx.percentage,\n    \"stroke-width\": 15,\n    striped: \"\",\n    \"striped-flow\": \"\"\n  }, null, 8 /* PROPS */, [\"percentage\"]), _createVNode(_component_el_card, null, {\n    default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */)]),\n    _: 1 /* STABLE */\n  })], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["ref","style","width","height","_createElementBlock","_Fragment","_createVNode","_component_el_progress","percentage","_ctx","striped","_component_el_card","default","_withCtx","_createElementVNode","_hoisted_1","_"],"sources":["D:\\code\\bugzilla\\527\\front-end\\src\\components\\BarChart.vue"],"sourcesContent":["<template>\r\n    <el-progress :percentage=\"percentage\" :stroke-width=\"15\" striped striped-flow />\r\n    <el-card>\r\n        <div ref=\"chartRef\" :style=\"{ width: '100%', height: '600%' }\"></div>\r\n    </el-card>\r\n</template>\r\n\r\n<script setup>\r\nimport * as echarts from \"echarts\";\r\nimport { ref, onMounted } from \"vue\";\r\n// import { defineProps, ref, onMounted, watch } from \"vue\";\r\nimport axios from 'axios';\r\n\r\nlet chart;\r\n\r\nconst percentage = ref(0)\r\n\r\n//axios\r\nconst sev = ref(null);\r\nconst chartRef = ref([]);\r\nlet option = {\r\n    tooltip: {\r\n        trigger: 'axis',\r\n        axisPointer: {\r\n            // Use axis to trigger tooltip\r\n            type: 'shadow' // 'shadow' as default; can also be 'line' or 'shadow'\r\n        }\r\n    },\r\n    legend: {},\r\n    grid: {\r\n        left: '3%',\r\n        right: '4%',\r\n        bottom: '3%',\r\n        containLabel: true\r\n    },\r\n    xAxis: {\r\n        type: 'value'\r\n    },\r\n    yAxis: {\r\n        type: 'category',\r\n        data: []\r\n    },\r\n    series: [\r\n        // {\r\n        //     name: 'Search Engine',\r\n        //     type: 'bar',\r\n        //     stack: 'total',\r\n        //     label: {\r\n        //         show: true\r\n        //     },\r\n        //     emphasis: {\r\n        //         focus: 'series'\r\n        //     },\r\n        //     data: [820, 832, 901, 934, 1290, 1330, 1320]\r\n        // }\r\n    ]\r\n};\r\n\r\nlet baseUrl = 'http://47.120.41.97:8002/bugs/'\r\n\r\nconst fetchRef = async () => {\r\n    try {\r\n        const response = await axios.get(baseUrl + 'statuses');\r\n        // chartRef = response.data; // 假设后端返回的数据格式符合饼图需要的数据结构\r\n        chartRef.value = response.data; // 假设后端返回的数据格式符合饼图需要的数据结构\r\n        if (chart) {\r\n            chart.setOption(getOption());\r\n        }\r\n\r\n        console.log('chartRefvalue', chartRef.value)\r\n\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n    }\r\n};\r\n\r\nconst fetchSev = async () => {\r\n    try {\r\n        const response = await axios.get(baseUrl + 'severity');\r\n        // sev = response.data; // 假设后端返回的数据格式符合饼图需要的数据结构\r\n        sev.value = response.data; // 假设后端返回的数据格式符合饼图需要的数据结构\r\n\r\n        console.log('severity', sev)\r\n\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n    }\r\n};\r\n\r\nconst fetchData = async () => {\r\n    // for (var sta in chartRef.value) {\r\n    await fetchRef();\r\n    await fetchSev();\r\n\r\n    for (var i = 0; i < sev.value.length; i++) {\r\n        option.series.push({\r\n            name: sev.value[i],\r\n            type: 'bar',\r\n            stack: 'Ad',\r\n            label: { show: true },\r\n            emphasis: { focus: 'series' },\r\n            data: []\r\n        });\r\n        console.log('666666', sev.value[i])\r\n        console.log('option.series', option.series)\r\n        for (var j = 0; j < chartRef.value.length; j++) {\r\n            await axios.get(baseUrl + 'severityStatusCount', {\r\n                params: {\r\n                    status: chartRef.value[j],\r\n                    severity: sev.value[i],\r\n                }\r\n            }).then(response => {\r\n                console.log(response.data.count);\r\n                // 处理成功的情况\r\n                option.series[option.series.length - 1].data.push(response.data.count);\r\n\r\n            })\r\n                .catch(error => {\r\n                    // 处理错误情况\r\n                    console.error('Error fetching data:', error);\r\n                });\r\n        }\r\n\r\n        percentage.value = (i * 100 / sev.value.length\r\n        if (percentage.value > 100) {\r\n            percentage.value = 100\r\n        }\r\n\r\n        if (chart) {\r\n            option.yAxis.data = chartRef.value\r\n            chart.setOption(getOption());\r\n            console.log(option)\r\n        }\r\n    }\r\n\r\n};\r\n\r\nonMounted(() => {\r\n    initChart();\r\n});\r\n\r\nconst getOption = () => {\r\n    return option;\r\n};\r\n\r\nconst initChart = () => {\r\n\r\n    // fetchRef();\r\n    // console.log('a')\r\n    // fetchSev();\r\n    // console.log('d')\r\n    fetchData();\r\n    console.log('e')\r\n    chart = echarts.init(chartRef.value);\r\n    console.log('b')\r\n    chart.setOption(getOption());\r\n    console.log('c')\r\n};\r\n\r\n</script>"],"mappings":";;EAGaA,GAAG,EAAC,UAAU;EAAEC,KAAK,EAAE;IAAAC,KAAA;IAAAC,MAAA;EAAA;;;;;uBAHpCC,mBAAA,CAAAC,SAAA,SACIC,YAAA,CAAgFC,sBAAA;IAAlEC,UAAU,EAAEC,IAAA,CAAAD,UAAU;IAAG,cAAY,EAAE,EAAE;IAAEE,OAAO,EAAP,EAAO;IAAC,cAAY,EAAZ;2CACjEJ,YAAA,CAEUK,kBAAA;IAJdC,OAAA,EAAAC,QAAA,CAGQ,MAAqE,CAArEC,mBAAA,CAAqE,OAArEC,UAAqE,8B;IAH7EC,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}