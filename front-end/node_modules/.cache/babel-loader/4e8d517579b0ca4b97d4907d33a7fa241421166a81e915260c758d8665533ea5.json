{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"KMapChart\",\n  class: \"KMapChart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","class","_createElementBlock","_hoisted_1"],"sources":["D:\\Files\\Code\\CoursesProjects\\YacBugzilla_KnowledgeMap\\front-end\\src\\components\\KMapCharts.vue"],"sourcesContent":["<template>\r\n  <div id=\"KMapChart\" class=\"KMapChart\"></div>\r\n</template>\r\n\r\n<script setup>\r\nimport * as echarts from \"echarts\";\r\nimport { onMounted, ref, getCurrentInstance } from \"vue\";\r\nrequire(\"echarts/lib/chart/graph\");\r\nrequire(\"echarts/lib/component/tooltip\");\r\nrequire(\"echarts/lib/component/title\");\r\n\r\nimport '../mock/KMapMock'\r\n\r\nconst {proxy} = getCurrentInstance();\r\nlet KMapChart = null;\r\nlet kMapData = ref([]);\r\nconst seriesData = ref([]);\r\nconst seriesLinks = ref([]);\r\nconst categories = ref([]);\r\n// const lastClickId = ref(\"\");\r\nconst colors = [\r\n  \"#a3d2ca\",\r\n  \"#056676\",\r\n  \"#ea2c62\",\r\n  \"#16a596\",\r\n  \"#03c4a1\",\r\n  \"#f5a25d\",\r\n  \"#8CD282\",\r\n  \"#32e0c4\",\r\n  \"#00FAE1\",\r\n  \"#f05454\",\r\n];\r\n\r\nonMounted(() => {\r\n  initKMapData();\r\n  formatData(kMapData);\r\n  initKMapChart();\r\n});\r\n\r\n/**\r\n * 初始化图表数据\r\n */\r\nfunction initKMapData() {\r\n  proxy\r\n    .$axios({\r\n      url: \"/getKMapData\",\r\n      method: \"get\",\r\n    })\r\n    .then((res) => {\r\n      alert(\"请求成功!\");\r\n      console.log(res);\r\n      kMapData = res.data;\r\n    });\r\n}\r\n\r\n/**\r\n * 节点点击事件\r\n */\r\nasync function nodeClick(params) {\r\n  const index = seriesData.value.findIndex(\r\n    (item) => item.id === params.data.id\r\n  );\r\n  console.log(\"点了节点：\" + (index + 1), \"clicked\");\r\n}\r\n\r\n/**\r\n * 设置echarts配置项,重绘画布\r\n */\r\nfunction initKMapChart() {\r\n  if (!KMapChart) {\r\n    KMapChart = echarts.init(document.getElementById(\"KMapChart\"));\r\n    KMapChart.on(\"click\", (params) => {\r\n      if (params.dataType === \"node\") {\r\n        nodeClick(params); //判断点击的是图表的节点部分\r\n      }\r\n    });\r\n  }\r\n  // 指定图表的配置项和数据\r\n  let option = {\r\n    animationDurationUpdate: 500, // 动画更新变化时间\r\n    animationEasingUpdate: \"quinticInOut\",\r\n    tooltip: {\r\n      show: false,\r\n    },\r\n    series: [\r\n      {\r\n        type: \"graph\",\r\n        layout: \"force\",\r\n        legendHoverLink: true, //是否启用图例 hover(悬停) 时的联动高亮。\r\n        hoverAnimation: true, //是否开启鼠标悬停节点的显示动画\r\n        focusNodeAdjacency: true,\r\n        edgeLabel: {\r\n          position: \"middle\", //边上的文字样式\r\n          normal: {\r\n            show: true,\r\n            textStyle: {\r\n              fontSize: 12,\r\n            },\r\n            position: \"middle\",\r\n            formatter: function (x) {\r\n              return x.data.name;\r\n            },\r\n          },\r\n        },\r\n        edgeSymbol: [\"\", \"arrow\"],\r\n        force: {\r\n          edgeLength: 15,\r\n          repulsion: 200,\r\n        },\r\n        roam: true,\r\n        draggable: true, //每个节点的拖拉\r\n        itemStyle: {\r\n          normal: {\r\n            color: \"#00FAE1\",\r\n            cursor: \"pointer\",\r\n            label: {\r\n              show: true,\r\n              position: [-10, -15],\r\n              textStyle: {\r\n                //标签的字体样式\r\n                color: \"#fff\", //字体颜色\r\n                fontStyle: \"normal\", //文字字体的风格 'normal'标准 'italic'斜体 'oblique' 倾斜\r\n                fontWeight: \"bold\", //'normal'标准'bold'粗的'bolder'更粗的'lighter'更细的或100 | 200 | 300 | 400...\r\n                fontFamily: \"sans-serif\", //文字的字体系列\r\n                fontSize: 12, //字体大小\r\n              },\r\n            },\r\n            nodeStyle: {\r\n              brushType: \"both\",\r\n              borderColor: \"rgba(255,215,0,0.4)\",\r\n              borderWidth: 1,\r\n            },\r\n          },\r\n          emphasis: {\r\n            //鼠标放上去有阴影效果\r\n            shadowColor: \"#00FAE1\",\r\n            shadowOffsetX: 0,\r\n            shadowOffsetY: 0,\r\n            shadowBlur: 40,\r\n          },\r\n        },\r\n        lineStyle: {\r\n          width: 2,\r\n        },\r\n        label: {\r\n          fontSize: 18,\r\n        },\r\n        symbolSize: 24, //节点大小\r\n        links: seriesLinks.value,\r\n        data: seriesData.value,\r\n        categories: categories.value,\r\n        cursor: \"pointer\",\r\n      },\r\n    ],\r\n  };\r\n  // 使用刚指定的配置项和数据显示图表。\r\n  KMapChart.setOption(option);\r\n}\r\n\r\n/**\r\n * 格式化数据到表格需要的数据\r\n */\r\nfunction formatData(list) {\r\n  let nodes = list.dataset.value.data;\r\n  let colorIndex = 0;\r\n  let data = [];\r\n  let loadedCat = [];\r\n  nodes.forEach((item) => {\r\n    if (item.categary && loadedCat.indexOf(item.categary) === -1) {\r\n      colorIndex = Math.floor(Math.random() * colors.length);\r\n      loadedCat.push(item.categary);\r\n      categories.value.push({ name: item.categary });\r\n    }\r\n    item.itemStyle = {\r\n      color: colors[colorIndex],\r\n      borderColor: \"#ffffff\",\r\n    };\r\n    data.push(item);\r\n  });\r\n  seriesData.value.push(...data);\r\n  seriesLinks.value.push(...list.dataset.value.linkData);\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n</style>"],"mappings":";;EACOA,EAAE,EAAC,WAAW;EAACC,KAAK,EAAC;;;uBAA1BC,mBAAA,CAA4C,OAA5CC,UAA4C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}