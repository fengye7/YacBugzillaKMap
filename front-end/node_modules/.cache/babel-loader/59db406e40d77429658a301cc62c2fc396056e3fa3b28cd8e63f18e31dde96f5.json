{"ast":null,"code":"import arrayMap from './_arrayMap.js';\nimport baseIntersection from './_baseIntersection.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseRest from './_baseRest.js';\nimport castArrayLikeObject from './_castArrayLikeObject.js';\nimport last from './last.js';\n\n/**\r\n * This method is like `_.intersection` except that it accepts `iteratee`\r\n * which is invoked for each element of each `arrays` to generate the criterion\r\n * by which they're compared. The order and references of result values are\r\n * determined by the first array. The iteratee is invoked with one argument:\r\n * (value).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Array\r\n * @param {...Array} [arrays] The arrays to inspect.\r\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\r\n * @returns {Array} Returns the new array of intersecting values.\r\n * @example\r\n *\r\n * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\r\n * // => [2.1]\r\n *\r\n * // The `_.property` iteratee shorthand.\r\n * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\r\n * // => [{ 'x': 1 }]\r\n */\nvar intersectionBy = baseRest(function (arrays) {\n  var iteratee = last(arrays),\n    mapped = arrayMap(arrays, castArrayLikeObject);\n  if (iteratee === last(mapped)) {\n    iteratee = undefined;\n  } else {\n    mapped.pop();\n  }\n  return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, baseIteratee(iteratee, 2)) : [];\n});\nexport default intersectionBy;","map":{"version":3,"names":["arrayMap","baseIntersection","baseIteratee","baseRest","castArrayLikeObject","last","intersectionBy","arrays","iteratee","mapped","undefined","pop","length"],"sources":["D:/code/bugzilla/527/front-end/node_modules/lodash-es/intersectionBy.js"],"sourcesContent":["import arrayMap from './_arrayMap.js';\r\nimport baseIntersection from './_baseIntersection.js';\r\nimport baseIteratee from './_baseIteratee.js';\r\nimport baseRest from './_baseRest.js';\r\nimport castArrayLikeObject from './_castArrayLikeObject.js';\r\nimport last from './last.js';\r\n\r\n/**\r\n * This method is like `_.intersection` except that it accepts `iteratee`\r\n * which is invoked for each element of each `arrays` to generate the criterion\r\n * by which they're compared. The order and references of result values are\r\n * determined by the first array. The iteratee is invoked with one argument:\r\n * (value).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Array\r\n * @param {...Array} [arrays] The arrays to inspect.\r\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\r\n * @returns {Array} Returns the new array of intersecting values.\r\n * @example\r\n *\r\n * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\r\n * // => [2.1]\r\n *\r\n * // The `_.property` iteratee shorthand.\r\n * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\r\n * // => [{ 'x': 1 }]\r\n */\r\nvar intersectionBy = baseRest(function(arrays) {\r\n  var iteratee = last(arrays),\r\n      mapped = arrayMap(arrays, castArrayLikeObject);\r\n\r\n  if (iteratee === last(mapped)) {\r\n    iteratee = undefined;\r\n  } else {\r\n    mapped.pop();\r\n  }\r\n  return (mapped.length && mapped[0] === arrays[0])\r\n    ? baseIntersection(mapped, baseIteratee(iteratee, 2))\r\n    : [];\r\n});\r\n\r\nexport default intersectionBy;\r\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,gBAAgB;AACrC,OAAOC,gBAAgB,MAAM,wBAAwB;AACrD,OAAOC,YAAY,MAAM,oBAAoB;AAC7C,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAOC,mBAAmB,MAAM,2BAA2B;AAC3D,OAAOC,IAAI,MAAM,WAAW;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,cAAc,GAAGH,QAAQ,CAAC,UAASI,MAAM,EAAE;EAC7C,IAAIC,QAAQ,GAAGH,IAAI,CAACE,MAAM,CAAC;IACvBE,MAAM,GAAGT,QAAQ,CAACO,MAAM,EAAEH,mBAAmB,CAAC;EAElD,IAAII,QAAQ,KAAKH,IAAI,CAACI,MAAM,CAAC,EAAE;IAC7BD,QAAQ,GAAGE,SAAS;EACtB,CAAC,MAAM;IACLD,MAAM,CAACE,GAAG,CAAC,CAAC;EACd;EACA,OAAQF,MAAM,CAACG,MAAM,IAAIH,MAAM,CAAC,CAAC,CAAC,KAAKF,MAAM,CAAC,CAAC,CAAC,GAC5CN,gBAAgB,CAACQ,MAAM,EAAEP,YAAY,CAACM,QAAQ,EAAE,CAAC,CAAC,CAAC,GACnD,EAAE;AACR,CAAC,CAAC;AAEF,eAAeF,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}